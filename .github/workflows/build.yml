name: Build and Release convmusic

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        architecture: [x86_64, arm64]
        exclude:
          - os: windows-latest
            architecture: arm64  # Windows ARM builds aren't well-supported

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      # Set up Python for Windows and macOS
      - name: Set up Python for Windows and macOS
        if: runner.os == 'Windows' || runner.os == 'macOS'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Set up Docker for Linux only
      - name: Set up Docker Buildx
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v2

      # Build with Docker + Nuitka for Linux
      - name: Build with Docker and Nuitka for Linux
        if: runner.os == 'Linux'
        run: |
          # Create a Dockerfile on the fly
          cat > Dockerfile << EOF
          FROM --platform=\$BUILDPLATFORM python:3.11-slim
          
          # Install system dependencies for Nuitka
          RUN apt-get update && apt-get install -y \
              build-essential \
              ccache \
              patchelf \
              python3-dev \
              git
          
          # Install Nuitka
          RUN pip install nuitka==1.9.3
          
          WORKDIR /app
          COPY . /app
          
          # Build with Nuitka
          RUN python -m nuitka \
              --standalone \
              --assume-yes-for-downloads \
              --follow-imports \
              --output-dir=/app/build \
              convert.py
          
          # Rename output
          RUN mv /app/build/convert.bin /app/build/convmusic
          EOF
          
          # Build Docker image with buildx for correct architecture
          docker buildx build --platform linux/${{ matrix.architecture }} \
            --output type=local,dest=./build \
            -t convmusic:linux-${{ matrix.architecture }} .

      # Windows uses Nuitka directly (unchanged)
      - name: Build with Nuitka on Windows
        if: runner.os == 'Windows'
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: convert.py

      # macOS uses Nuitka directly (same as Windows)
      - name: Build with Nuitka on macOS
        if: runner.os == 'macOS'
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: convert.py

      # Linux Rename, Archive, and Upload
      - name: Rename Linux Executable
        if: runner.os == 'Linux'
        run: |
          mv build/convmusic build/convmusic-linux
          tar -czvf convmusic-linux-${{ matrix.architecture }}.tar.gz -C build convmusic-linux

      - name: Upload Linux Archive
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: convmusic-linux-${{ matrix.architecture }}
          path: convmusic-linux-${{ matrix.architecture }}.tar.gz
          if-no-files-found: error

      # macOS Rename, Archive, and Upload
      - name: Rename macOS Executable
        if: runner.os == 'macOS'
        run: |
          mv build/convert build/convmusic-macos
          tar -czvf convmusic-macos-${{ matrix.architecture }}.tar.gz -C build convmusic-macos

      - name: Upload macOS Archive
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: convmusic-macos-${{ matrix.architecture }}
          path: convmusic-macos-${{ matrix.architecture }}.tar.gz
          if-no-files-found: error

      # Windows Rename, Archive, and Upload (unchanged)
      - name: Rename Windows Executable
        if: runner.os == 'Windows'
        run: |
          mv build/convert.exe build/convmusic.exe
          tar -czvf convmusic-windows-${{ matrix.architecture }}.tar.gz -C build convmusic.exe

      - name: Upload Windows Archive
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: convmusic-windows-${{ matrix.architecture }}
          path: convmusic-windows-${{ matrix.architecture }}.tar.gz
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Ensure token has write access
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: 1.0.${{ github.run_number }}
          files: artifacts/**/*.tar.gz  # Only upload archives
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
